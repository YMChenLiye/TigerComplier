%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%nonassoc DO OF
%nonassoc THEN /* ELSE must come after THEN! */
%nonassoc ELSE
%left SEMICOLON
%left ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS


%%

program
    : exp

exp
    : INT
    | STRING
    | LValue
    | NIL
    | MINUS INT
    | MINUS ID
    | LPAREN exps RPAREN 
    | LPAREN RPAREN 
    | FunctionCall
    | Arithmetic
    | Comparison
    | exp AND exp
    | exp OR exp
    | RecordCreation
    | ArrayCreation
    | LValue ASSIGN exp
    | IF exp THEN exp ELSE exp
    | IF exp THEN exp
    | WHILE exp DO exp
    | FOR ID ASSIGN exp TO exp DO exp
    | BREAK
    | LET DeclarationSequence IN exps END

exps
    : exp
    | exps SEMICOLON exp

DeclarationSequence
    : %empty
    | DeclarationSequence Declaration

Declaration
    : TypeDeclaration
    | VarDeclaration
    | FunctionDeclaration

TypeDeclaration
    : TYPE ID EQ OtherType

OtherType
    : ID
    | LBRACE TypeFields RBRACE
    | ARRAY OF ID

TypeFields
    : %empty
    | TypeKV TypeKVList

TypeKV
    : ID COLON ID

TypeKVList
    : %empty
    | TypeKVList COMMA TypeKV

VarDeclaration
    : VAR ID ASSIGN exp
    | VAR ID COLON ID ASSIGN exp

FunctionDeclaration
    : FUNCTION ID LPAREN TypeFields RPAREN EQ exp
    | FUNCTION ID LPAREN TypeFields RPAREN COLON ID EQ exp

LValue
    : ID LValue_extension

LValue_extension
    : %empty
    | DOT ID LValue_extension
    | LBRACK exp RBRACK LValue_extension

FunctionCall
    : ID LPAREN RPAREN 
    | ID LPAREN expList RPAREN 

expList
    : exp
    | expList COMMA exp

Arithmetic
    : exp PLUS exp
    | exp MINUS exp
    | exp TIMES exp
    | exp DIVIDE exp

Comparison
    : exp EQ exp
    | exp NEQ exp 
    | exp LT exp
    | exp LE exp
    | exp GT exp
    | exp GE exp

RecordCreation
    : ID LBRACE RBRACE
    | ID LBRACE FieldAssignmentList RBRACE

FieldAssignmentList
    : FieldAssignment
    | FieldAssignmentList COMMA FieldAssignment

FieldAssignment
    : ID EQ exp

ArrayCreation
    : ID LBRACK exp RBRACK OF exp

