%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"
#include "absyn.h"
#include "symbol.h" 

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
    A_var var;
    A_exp exp;
    A_dec dec;
    A_ty ty;
    A_decList decList;
    A_expList expList;
    A_field field;
    A_fieldList fieldList;
    A_fundec fundec;
    A_fundecList fundecList;
    A_namety namety;
    A_nametyList nametyList;
    A_efield efield;
    A_efieldList efieldList;
    /* et cetera */
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%type <var> LValue LValue_extension
%type <exp> exp program FunctionCall
%type <dec> Declaration VarDeclaration
%type <ty> OtherType
%type <decList> DeclarationSequence
%type <expList> expList
%type <field> TypeKV
%type <fieldList> TypeFields TypeKVList
%type <fundec> FunctionDeclaration
%type <fundecList> FunctionDeclarations
%type <namety> TypeDeclaration
%type <nametyList> TypeDeclarations
%type <efield> FieldAssignment
%type <efieldList> FieldAssignmentList

/* et cetera */

%{
A_var GetNext(A_var pCurrent)
{
    if(pCurrent->kind == A_simpleVar)
    {
        fprintf(stdout, "error, kind cant be A_simpleVar!!!");
        return NULL;
    }
    else if(pCurrent->kind == A_fieldVar)
    {
        return pCurrent->u.field.var;
    }
    else if(pCurrent->kind == A_subscriptVar)
    {
        return pCurrent->u.subscript.var;
    }
}

void SetNext(A_var pCurrent, A_var pNext)
{
    if(pCurrent->kind == A_simpleVar)
    {
        fprintf(stdout, "error, kind cant be A_simpleVar!!!");
        return;
    }
    else if(pCurrent->kind == A_fieldVar)
    {
        pCurrent->u.field.var = pNext;
    }
    else if(pCurrent->kind == A_subscriptVar)
    {
        pCurrent->u.subscript.var = pNext;
    }
}

A_var LValueAction(A_var extension, A_var element)
{
    if(extension == NULL)
    {
        return element;
    }

    A_var pCurrent = extension;
    A_var pNext = GetNext(pCurrent);

    while( pNext != NULL)
    {
        pCurrent = pNext;
        pNext = GetNext(pCurrent);
    }

    // at this time , pNext == NULL
    SetNext(pCurrent, element);
    return extension;
}

%}



%start program

%nonassoc DO OF
%nonassoc THEN /* ELSE must come after THEN! */
%nonassoc ELSE
%left SEMICOLON
%left ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS


%%

program
    : exp       { absyn_root=$1; fprintf(stdout, "absyn_root = %x, exp\n", absyn_root); }

exp
    : INT       { $$ = A_IntExp(EM_tokPos, $1); /*fprintf(stdout, "EM_tokPos = %d\n", EM_tokPos);*/ }
    | STRING    { $$ = A_StringExp(EM_tokPos, $1); }
    | LValue    { $$ = A_VarExp(EM_tokPos, $1); }
    | NIL       { $$ = A_NilExp(EM_tokPos); }
    | MINUS INT
    | MINUS ID
    | LPAREN exps RPAREN 
    | LPAREN RPAREN 
    | FunctionCall  { $$ = $1; }
    | Arithmetic
    | Comparison
    | exp AND exp
    | exp OR exp
    | RecordCreation
    | ArrayCreation
    | LValue ASSIGN exp
    | IF exp THEN exp ELSE exp
    | IF exp THEN exp
    | WHILE exp DO exp
    | FOR ID ASSIGN exp TO exp DO exp
    | BREAK
    | LET DeclarationSequence IN exps END

exps
    : exp
    | exps SEMICOLON exp

DeclarationSequence
    : %empty
    | DeclarationSequence Declaration

Declaration
    : TypeDeclarations
    | VarDeclaration
    | FunctionDeclarations

TypeDeclarations
    : TypeDeclaration
    | TypeDeclarations TypeDeclaration

FunctionDeclarations
    : FunctionDeclaration
    | FunctionDeclarations FunctionDeclaration

TypeDeclaration
    : TYPE ID EQ OtherType

OtherType
    : ID
    | LBRACE TypeFields RBRACE
    | ARRAY OF ID

TypeFields
    : %empty
    | TypeKV TypeKVList

TypeKV
    : ID COLON ID

TypeKVList
    : %empty
    | TypeKVList COMMA TypeKV

VarDeclaration
    : VAR ID ASSIGN exp
    | VAR ID COLON ID ASSIGN exp

FunctionDeclaration
    : FUNCTION ID LPAREN TypeFields RPAREN EQ exp
    | FUNCTION ID LPAREN TypeFields RPAREN COLON ID EQ exp

LValue
    : ID LValue_extension { $$ = LValueAction($2, A_SimpleVar(EM_tokPos, S_Symbol($1))); }

LValue_extension
    : %empty    { $$ = NULL; }
    | DOT ID LValue_extension   { $$ = LValueAction($3, A_FieldVar(EM_tokPos, NULL, S_Symbol($2))); }
    | LBRACK exp RBRACK LValue_extension    { $$ = LValueAction($4, A_SubscriptVar(EM_tokPos, NULL, $2)); }

FunctionCall
    : ID LPAREN RPAREN      { $$ = A_CallExp(EM_tokPos, S_Symbol($1), NULL); } 
    | ID LPAREN expList RPAREN  { $$ = A_CallExp(EM_tokPos, S_Symbol($1), $3); }

expList
    : exp
    | expList COMMA exp

Arithmetic
    : exp PLUS exp
    | exp MINUS exp
    | exp TIMES exp
    | exp DIVIDE exp

Comparison
    : exp EQ exp
    | exp NEQ exp 
    | exp LT exp
    | exp LE exp
    | exp GT exp
    | exp GE exp

RecordCreation
    : ID LBRACE RBRACE
    | ID LBRACE FieldAssignmentList RBRACE

FieldAssignmentList
    : FieldAssignment
    | FieldAssignmentList COMMA FieldAssignment

FieldAssignment
    : ID EQ exp

ArrayCreation
    : ID LBRACK exp RBRACK OF exp

